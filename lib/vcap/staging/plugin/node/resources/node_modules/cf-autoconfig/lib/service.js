/*
 * Cloud Foundry auto-configuration
 * Service Setup
 */

var cf = require("cf-runtime");

function Service () {
  this.type = "";
  this.supportedModules = {};
}

Service.prototype.setup = function () {
  if (cf.CloudApp.serviceNamesOfType[this.type] === undefined) return null;

  if (cf.CloudApp.serviceNamesOfType[this.type].length !== 1) {
    console.log("Found %d %s services. Skipping auto-configuration.", cf.CloudApp.serviceNamesOfType[this.type].length, this.type);
    return null;
  }

  var props = cf.CloudApp.serviceProps[this.type];

  if (!props) return null;

  var setupModules = function (err, files) {
    if (!err) {
      files.forEach(function (file) {
        file = path.resolve(path.join(root, file));
        var moduleData = null;
        try {
          moduleData = require(file);
        }
        catch (e) {}
        if (moduleData !== null) {
          setupFunction(moduleData, props);
        }
      });
    }
  };

  for (var moduleName in this.supportedModules) {
    var setupFunction = this.supportedModules[moduleName];

    // if module is in the basic node path
    var basicModuleData = null;
    try {
      basicModuleData = require(moduleName);
    }
    catch (e) {}
    if (basicModuleData !== null) {
      setupFunction(basicModuleData, props);
    }

    // Look for modules on deeper levels
    var path = require("path");
    var glob = require("glob");

    glob(path.join(process.cwd, "node_modules/**/node_modules", moduleName), { sync : true }, setupModules);
  }
};

exports.Service = Service;
