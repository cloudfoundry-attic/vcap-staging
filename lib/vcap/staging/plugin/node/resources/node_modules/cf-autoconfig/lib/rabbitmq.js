/*
 * Cloud Foundry auto-configuration
 * Rabbitmq connection
 *
 * Auto-configured node modules:
 *
 * "amqp" [https://github.com/postwait/node-amqp]
 * - createConnection()
 * - new Connection()
 */

var path = require("path");
var sc = require(path.resolve(path.join(__dirname, "service")));
var util = require("util");

function Rabbitmq () {
  this.type = "rabbitmq";
  this.supportedModules = {
    "amqp" : function (moduleData, props) {
      var config = { "login" : props.username,
                     "password" : props.password,
                     "host" : props.host,
                     "port" : props.port,
                     "vhost" : props.vhost
                   };

      // connect()
      if ("createConnection" in moduleData) {
        var oldCreateConnection = moduleData.createConnection;
        var oldCreateConnectionProto = moduleData.createConnection.prototype;

        moduleData.createConnection = function () {
          if (arguments.length === 2) {
            return oldCreateConnection.call(this, config, arguments[1]);
          }
          else if (arguments.length === 3) {
            return oldCreateConnection.call(this, config, arguments[1], arguments[2]);
          }
          else {
            return oldCreateConnection.call(this, config);
          }
        };
        moduleData.createConnection.prototype = oldCreateConnectionProto;
      }

      // new Connection()
      if ("Connection" in moduleData) {
        var oldConnection = moduleData.Connection;
        var oldConnectionProto = moduleData.Connection.prototype;

        moduleData.Connection = function () {
          var self = function () {
            if (arguments.length === 2)
              return oldConnection.call(this, config, arguments[1]);
            else if (arguments.length === 3)
              return oldConnection.call(this, config, arguments[2]);
            else
              return oldConnection.call(this, config);
          };
          for (var prop in oldConnection) {
            self[prop] = oldConnection[prop];
          }
          return self;
        }();

        moduleData.Connection.prototype = oldConnectionProto;
      }
    }
  };
}

util.inherits(Rabbitmq, sc.Service);

function setupRabbitmq () {
  var service = new Rabbitmq();
  service.setup();
}

exports.setup = setupRabbitmq;
