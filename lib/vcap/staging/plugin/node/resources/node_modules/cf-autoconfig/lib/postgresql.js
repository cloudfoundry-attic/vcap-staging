/*
 * Cloud Foundry auto-configuration
 * Postgresql connection
 *
 * Auto-configured node modules:
 *
 * "pg" [https://github.com/brianc/node-postgres]
 * - defaults
 * - connect()
 * - new Client()
 */

var sc = require(require("path").join(__dirname, "service"));
var util = require("util");

function Postgresql () {
  this.type = "postgresql";
  this.supportedModules = {
    "pg" : function (moduleData, props) {
      // defaults
      if (moduleData.hasOwnProperty("defaults")) {
        moduleData.defaults.host = props.host;
        moduleData.defaults.port = props.port;
        moduleData.defaults.user = props.username;
        moduleData.defaults.password = props.password;
        moduleData.defaults.database = props.database;
      }

      // connect()
      // this module returns an object, not function, using getPrototypeOf
      if (typeof moduleData === "object") {
        var pgProto = Object.getPrototypeOf(moduleData);
        if ("connect" in pgProto) {
          var oldConnect = pgProto.connect;
          pgProto.connect = function () {
            if (typeof arguments[0] === "object") {
              // can accept non-connection options
              config = arguments[0];
              config.host = props.host;
              config.port = props.port;
              config.user = props.username;
              config.password = props.password;
              config.database = props.database;
              arguments[0] = config;
            }
            else if (typeof arguments[0] === "string") {
              arguments[0] = props.url;
            }
            // or defaults
            return oldConnect.apply(this, arguments);
          };
        }
      }

      // new Client()
      if ("Client" in moduleData) {
        var oldClient = moduleData.Client;
        var oldClientProto = moduleData.Client.prototype;

        moduleData.Client = function () {
          var self = function () {
            arguments[0] = props.url;
            // can not accept non-connection options
            return oldClient.apply(this, arguments);
          };

          for (var prop in oldClient) {
            self[prop] = oldClient[prop];
          }

          return self;
        }();
        moduleData.Client.prototype = oldClientProto;
      }
    }
  };
}

util.inherits(Postgresql, sc.Service);

function setupPostgresql () {
  var service = new Postgresql();
  service.setup();
}

exports.setup = setupPostgresql;
