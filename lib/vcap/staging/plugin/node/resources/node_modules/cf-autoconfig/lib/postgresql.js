/*
 * Cloud Foundry auto-configuration
 * Postgresql connection
 *
 * Auto-configured node modules:
 *
 * "pg" [https://github.com/brianc/node-postgres]
 * - defaults
 * - connect()
 * - new Client()
 */

var sc = require(require("path").join(__dirname, "service"));
var util = require("util");

function Postgresql () {
  this.type = "postgresql";
  this.supportedModules = {
    "pg" : function (moduleData, props) {
      // defaults
      if (moduleData.hasOwnProperty("defaults")) {
        moduleData.defaults.host = props.host;
        moduleData.defaults.port = props.port;
        moduleData.defaults.user = props.username;
        moduleData.defaults.password = props.password;
        moduleData.defaults.database = props.database;
      }

      // connect()
      // this module returns an object, not function, using getPrototypeOf
      if (typeof moduleData === "object") {
        var connectProto = Object.getPrototypeOf(moduleData);
        if ("connect" in connectProto) {
          var oldConnect = connectProto.connect;
          connectProto.connect = function () {
            if (arguments.length === 1) {
              // using defaults
              return oldConnect.call(this, arguments[0]);
            }
            else {
              var config = props.url;
              if (typeof arguments[0] === "object") {
                // can accept non-connection options
                config = arguments[0];
                config.host = props.host;
                config.port = props.port;
                config.user = props.username;
                config.password = props.password;
                config.database = props.database;
              }
              return oldConnect.call(this, config, arguments[1]);
            }
          };
        }
      }

      // new Client()
      if ("Client" in moduleData) {
        var oldClient = moduleData.Client;
        var oldClientProto = moduleData.Client.prototype;

        moduleData.Client = function () {
          var self = function () {
            // can not accept non-connection options
            return oldClient.call(this, props.url);
          };

          for (var prop in oldClient) {
            self[prop] = oldClient[prop];
          }

          return self;
        }();
        moduleData.Client.prototype = oldClientProto;
      }
    }
  };
}

util.inherits(Postgresql, sc.Service);

function setupPostgresql () {
  var service = new Postgresql();
  service.setup();
}

exports.setup = setupPostgresql;
